{"remainingRequest":"C:\\Users\\Admin\\Desktop\\server-dashboard\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Admin\\Desktop\\server-dashboard\\frontend\\src\\views\\GPUOverview.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Admin\\Desktop\\server-dashboard\\frontend\\src\\views\\GPUOverview.vue","mtime":1638882791883},{"path":"C:\\Users\\Admin\\Desktop\\server-dashboard\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1638800208235},{"path":"C:\\Users\\Admin\\Desktop\\server-dashboard\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":1638800209093},{"path":"C:\\Users\\Admin\\Desktop\\server-dashboard\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1638800208235},{"path":"C:\\Users\\Admin\\Desktop\\server-dashboard\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":1638800209398}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KDQovLyBAIGlzIGFuIGFsaWFzIHRvIC9zcmMNCi8vIGltcG9ydCB7IEhUVFAgfSBmcm9tICcuL2h0dHAtY29tbW9uJzsNCg0KZXhwb3J0IGRlZmF1bHQgew0KICBjcmVhdGVkKCkgew0KICAgIHRoaXMucmVmcmVzaCgpOw0KICAgIHRoaXMudGltZXIgPSBzZXRJbnRlcnZhbCh0aGlzLnJlZnJlc2gsIDYwMDAwKQ0KICB9LA0KICBiZWZvcmVEZXN0cm95KCkgew0KICAgIGNsZWFySW50ZXJ2YWwodGhpcy50aW1lcikNCiAgfSwNCiAgZGF0YSgpIHsNCiAgICByZXR1cm4gew0KICAgICAgdXNlcm5hbWU6IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd1c2VybmFtZScpLA0KICAgICAgc2VydmVyczogW10sDQogICAgICBoaWdobGlnaHRGcmVlR1BVczogZmFsc2UsDQogICAgICBvbmx5U2hvd0ZyZWVHUFU6IGZhbHNlLA0KICAgICAgaGlnaGxpZ2h0VXNlcm5hbWU6IHRydWUsDQogICAgICBtYXhQcm9jZXNzZXNTaG93OiAxLA0KICAgICAgcmVmcmVzaExvYWRpbmc6IGZhbHNlLA0KICAgICAgc25hY2tiYXI6IGZhbHNlLA0KICAgICAgZGF0ZTogJycsDQogICAgfQ0KICB9LA0KICBtZXRob2RzOiB7DQogICAgLy8gc3dpdGNoSGlnaGxpZ2h0RnJlZUdQVSgpIHsNCiAgICAvLyAgIHRoaXMuaGlnaGxpZ2h0RnJlZUdQVXMgPSAhdGhpcy5oaWdobGlnaHRGcmVlR1BVczsNCiAgICAvLyB9LA0KICAgIC8vIHN3aXRjaFNob3dGcmVlR1BVKCkgew0KICAgIC8vICAgdGhpcy5vbmx5U2hvd0ZyZWVHUFUgPSAhdGhpcy5vbmx5U2hvd0ZyZWVHUFU7DQogICAgLy8gfSwNCiAgICAvLyBzdG9yZV91c2VybmFtZSgpIHsNCiAgICAvLyAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCd1c2VybmFtZScsIHRoaXMudXNlcm5hbWUpOw0KICAgIC8vIH0sDQogICAgLy8gcHJvY2Vzc0xpc3QoKSB7DQogICAgLy8gICBsZXQgc2VydmVyTGlzdCA9IFsuLi50aGlzLnNlcnZlcnNdDQoNCiAgICAvLyAgIGxldCBzZXJ2ZXJMaXN0RmlsdGVyZWQgPSBbXTsNCiAgICAvLyAgIGlmICh0aGlzLm9ubHlTaG93RnJlZUdQVSkgew0KICAgIC8vICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNlcnZlckxpc3QubGVuZ3RoOyBpKyspIHsNCiAgICAvLyAgICAgICBsZXQgZm91bmRGcmVlR1BVID0gZmFsc2U7DQogICAgLy8gICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBzZXJ2ZXJMaXN0W2ldLmdwdXMubGVuZ3RoOyBqKyspIHsNCiAgICAvLyAgICAgICAgIGlmIChzZXJ2ZXJMaXN0W2ldLmdwdXNbal0ubWVtb3J5X3VzZWQgPCAoc2VydmVyTGlzdFtpXS5ncHVzW2pdLm1lbW9yeV90b3RhbCAqIDAuMSkpIHsNCiAgICAvLyAgICAgICAgICAgZm91bmRGcmVlR1BVID0gdHJ1ZTsNCiAgICAvLyAgICAgICAgICAgYnJlYWs7DQogICAgLy8gICAgICAgICB9DQogICAgLy8gICAgICAgfQ0KICAgIC8vICAgICAgIGlmIChmb3VuZEZyZWVHUFUpIHsNCiAgICAvLyAgICAgICAgIHNlcnZlckxpc3RGaWx0ZXJlZC5wdXNoKHNlcnZlckxpc3RbaV0pDQogICAgLy8gICAgICAgfQ0KICAgIC8vICAgICB9DQogICAgLy8gICB9IGVsc2Ugew0KICAgIC8vICAgICBzZXJ2ZXJMaXN0RmlsdGVyZWQgPSBzZXJ2ZXJMaXN0Ow0KICAgIC8vICAgfQ0KICAgIC8vICAgcmV0dXJuIHNlcnZlckxpc3RGaWx0ZXJlZDsNCiAgICAvLyB9LA0KICAgIC8vIHJlZnJlc2goKSB7DQogICAgLy8gICB0aGlzLnJlZnJlc2hMb2FkaW5nID0gdHJ1ZTsNCiAgICAvLyAgIEhUVFAuZ2V0KCdnZXQtZ3B1cycpDQogICAgLy8gICAgICAgLnRoZW4ocmVzID0+IHsNCiAgICAvLyAgICAgICAgIHRoaXMuc2VydmVycyA9IHJlcy5kYXRhOw0KICAgIC8vICAgICAgICAgdGhpcy5zZXJ2ZXJzLnNvcnQoKGEsIGIpID0+IGEuaG9zdG5hbWUgPCBiLmhvc3RuYW1lID8gLTEgOiAxKTsNCiAgICAvLyAgICAgICAgIHRoaXMucmVmcmVzaExvYWRpbmcgPSBmYWxzZTsNCiAgICAvLyAgICAgICAgIHRoaXMuZGF0ZSA9IG5ldyBEYXRlKCkudG9Mb2NhbGVTdHJpbmcoImRlLURFIiwge3RpbWVab25lOiAiRXVyb3BlL0JlcmxpbiJ9KTsNCiAgICAvLyAgICAgICB9KQ0KICAgIC8vICAgICAgIC5jYXRjaChlcnIgPT4gew0KICAgIC8vICAgICAgICAgY29uc29sZS5sb2coZXJyKTsNCiAgICAvLyAgICAgICAgIHRoaXMucmVmcmVzaExvYWRpbmcgPSBmYWxzZTsNCiAgICAvLyAgICAgICAgIHRoaXMuc25hY2tiYXIgPSB0cnVlOw0KICAgIC8vICAgICAgIH0pOw0KICAgIC8vIH0NCiAgfQ0KfQ0K"},{"version":3,"sources":["GPUOverview.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"GPUOverview.vue","sourceRoot":"src/views","sourcesContent":["<template>\r\n  <div class=\"gpu-overview\">\r\n    \r\n\r\n    <!-- <v-snackbar v-model=\"snackbar\" :timeout=\"8000\" top color=\"red darken-4\">\r\n      <span>An error occurred while connecting to the servers.</span>\r\n      <v-btn text color=\"white\" @click=\"snackbar = false\">Close</v-btn>\r\n    </v-snackbar> -->\r\n\r\n    <v-container class=\"mb-5\">\r\n      <v-row wrap>\r\n        <h1 class=\"subtitle-1 grey--text\">Match Overview</h1>\r\n        <!-- <v-switch class=\"px-2 my-1 pt-5\" @change=\"switchHighlightFreeGPU()\" color=\"green lighten-2\" label=\"Highlight free GPUs\"></v-switch>\r\n        <v-switch class=\"px-2 my-1 pt-5\" @change=\"switchShowFreeGPU()\" color=\"green lighten-2\" label=\"Only show servers with free GPUs\"></v-switch>\r\n        <v-text-field class=\"px-2 my-1\" v-model=\"username\" color=\"purple\" @change=\"store_username()\" label=\"Type in username to highlight\"></v-text-field>\r\n        <v-spacer></v-spacer>\r\n        <span class=\"grey--text pr-2 my-2 pt-5\" v-if=\"date !== ''\">Last update: {{ date }}</span>\r\n        <div class=\"my-1 pt-4\">\r\n          <v-btn text color=\"grey\" :loading=\"refreshLoading\" @click=\"refresh\">\r\n            <v-icon left>refresh</v-icon>\r\n            <span>Refresh</span>\r\n          </v-btn>\r\n        </div> -->\r\n\r\n      </v-row>\r\n\r\n      <v-row wrap justify=\"center\">\r\n        <v-card elevation=\"2\" height=\"100%\" width=\"75%\" align=\"center\">asdasdasdasd</v-card>\r\n      </v-row>\r\n      <v-row wrap justify=\"center\">\r\n        <v-card elevation=\"2\" height=\"100%\" width=\"75%\" align=\"center\">asdasdasdasd</v-card>\r\n      </v-row>\r\n        <!-- <v-col class=\"my-2\" cols=\"12\" lg=\"6\" v-for=\"server in processList()\" :key=\"server.hostname\">\r\n          <div class=\"white\">\r\n            <div class=\"ma-2\">\r\n              <span class=\"grey--text text--darken-3 font-weight-bold\">{{ server.hostname }}</span>\r\n              <v-simple-table dense>\r\n                <tbody>\r\n                <tr v-for=\"gpu in server.gpus\" :key=\"gpu.index\" :class=\"(gpu.memory_used < gpu.memory_total * 0.1) && highlightFreeGPUs ? 'green lighten-4' : 'white'\">\r\n                  <td class=\"pa-0 ma-0\"><span class=\"teal--text text--lighten-1\">[{{ gpu.index }}]</span></td>\r\n                  <td class=\"pa-0 ma-0\"><span class=\"indigo--text text--darken-4\">{{ gpu.name }}</span></td>\r\n                  <td class=\"pa-0 ma-0\"><span>| </span></td>\r\n                  <td class=\"pa-0 ma-0\">\r\n                    <span class=\"red--text text--darken-4\" v-if=\"gpu.temperature_gpu < 50\">{{ gpu.temperature_gpu }}'C</span>\r\n                    <span class=\"deep-orange--text text--accent-3 font-weight-bold\" v-if=\"gpu.temperature_gpu >= 50\">{{ gpu.temperature_gpu }}'C</span>,\r\n                  </td>\r\n                  <td class=\"pa-0 ma-0\">\r\n                    <span class=\"green--text text--darken-4\" v-if=\"gpu.utilization_gpu === 0\">{{ gpu.utilization_gpu }}</span>\r\n                    <span class=\"green--text text--darken-2 font-weight-bold\" v-if=\"gpu.utilization_gpu > 0\">{{ gpu.utilization_gpu }}</span>\r\n                  </td>\r\n                  <td>\r\n                    <span class=\"green--text text--darken-4\" v-if=\"gpu.utilization_gpu === 0\">%</span>\r\n                    <span class=\"green--text text--darken-2 font-weight-bold\" v-if=\"gpu.utilization_gpu > 0\">%</span>\r\n                  </td>\r\n                  <td class=\"pa-0 ma-0\"><span>| </span></td>\r\n                  <td class=\"pa-0 ma-0\">\r\n                    <span class=\"lime--text text--darken-3 font-weight-bold\">{{ gpu.memory_used }}</span> /\r\n                    <span class=\"lime--text text--darken-4\">{{ gpu.memory_total }}</span> MB\r\n                  </td>\r\n                  <td class=\"pa-0 ma-0\"><span>| </span></td>\r\n                  <td class=\"pa-0 ma-0\">\r\n                    <div v-if=\"gpu.processes.length <= maxProcessesShow\" class=\"pa-0 ma-0\">\r\n                      <span class=\"px-1\" v-for=\"process in gpu.processes\" :key=\"process.pid\">\r\n                        <span v-if=\"process.username === username && highlightUsername\" class=\"purple--text\">{{ process.username }}</span>\r\n                        <span v-if=\"process.username !== username || !highlightUsername\">{{ process.username }}</span>\r\n                        (<span class=\"lime--text text--darken-4\">{{ process.gpu_memory_usage }}</span>)\r\n                      </span>\r\n                    </div>\r\n                    <div v-if=\"gpu.processes.length > maxProcessesShow\" class=\"pa-0 ma-0\">\r\n                      <span class=\"px-1\" v-for=\"process in gpu.processes.slice(0, maxProcessesShow)\" :key=\"process.pid\">\r\n                        <span v-if=\"process.username === username && highlightUsername\" class=\"purple--text pa-0 ma-0\">{{ process.username }}</span>\r\n                        <span v-if=\"process.username !== username || !highlightUsername\" class=\"pa-0 ma-0\">{{ process.username }}</span>\r\n                        (<span class=\"lime--text text--darken-4\">{{ process.gpu_memory_usage }}</span>)\r\n                      </span>\r\n                      <v-tooltip top content-class=\"grey\">\r\n                        <template v-slot:activator=\"{ on, attrs }\">\r\n                          <v-btn icon v-bind=\"attrs\" v-on=\"on\">\r\n                            <v-icon color=\"grey darken-3\">more_horiz</v-icon>\r\n                          </v-btn>\r\n                        </template>\r\n                        <span class=\"pa-0 ma-0\" v-for=\"process in gpu.processes\" :key=\"process.pid\">\r\n                          <span v-if=\"process.username === username && highlightUsername\" class=\"purple--text pa-0 ma-0\">{{ process.username }}</span>\r\n                          <span v-if=\"process.username !== username || !highlightUsername\" class=\"pa-0 ma-0\">{{ process.username }}</span>\r\n                          (<span class=\"black--text text--darken-2\">{{ process.gpu_memory_usage }}</span>)\r\n                        </span>\r\n                      </v-tooltip>\r\n                    </div>\r\n                  </td>\r\n                </tr>\r\n                </tbody>\r\n              </v-simple-table>\r\n            </div>\r\n          </div>\r\n        </v-col> -->\r\n      <!-- </v-row> -->\r\n    </v-container>\r\n\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n// @ is an alias to /src\r\n// import { HTTP } from './http-common';\r\n\r\nexport default {\r\n  created() {\r\n    this.refresh();\r\n    this.timer = setInterval(this.refresh, 60000)\r\n  },\r\n  beforeDestroy() {\r\n    clearInterval(this.timer)\r\n  },\r\n  data() {\r\n    return {\r\n      username: localStorage.getItem('username'),\r\n      servers: [],\r\n      highlightFreeGPUs: false,\r\n      onlyShowFreeGPU: false,\r\n      highlightUsername: true,\r\n      maxProcessesShow: 1,\r\n      refreshLoading: false,\r\n      snackbar: false,\r\n      date: '',\r\n    }\r\n  },\r\n  methods: {\r\n    // switchHighlightFreeGPU() {\r\n    //   this.highlightFreeGPUs = !this.highlightFreeGPUs;\r\n    // },\r\n    // switchShowFreeGPU() {\r\n    //   this.onlyShowFreeGPU = !this.onlyShowFreeGPU;\r\n    // },\r\n    // store_username() {\r\n    //   localStorage.setItem('username', this.username);\r\n    // },\r\n    // processList() {\r\n    //   let serverList = [...this.servers]\r\n\r\n    //   let serverListFiltered = [];\r\n    //   if (this.onlyShowFreeGPU) {\r\n    //     for (let i = 0; i < serverList.length; i++) {\r\n    //       let foundFreeGPU = false;\r\n    //       for (let j = 0; j < serverList[i].gpus.length; j++) {\r\n    //         if (serverList[i].gpus[j].memory_used < (serverList[i].gpus[j].memory_total * 0.1)) {\r\n    //           foundFreeGPU = true;\r\n    //           break;\r\n    //         }\r\n    //       }\r\n    //       if (foundFreeGPU) {\r\n    //         serverListFiltered.push(serverList[i])\r\n    //       }\r\n    //     }\r\n    //   } else {\r\n    //     serverListFiltered = serverList;\r\n    //   }\r\n    //   return serverListFiltered;\r\n    // },\r\n    // refresh() {\r\n    //   this.refreshLoading = true;\r\n    //   HTTP.get('get-gpus')\r\n    //       .then(res => {\r\n    //         this.servers = res.data;\r\n    //         this.servers.sort((a, b) => a.hostname < b.hostname ? -1 : 1);\r\n    //         this.refreshLoading = false;\r\n    //         this.date = new Date().toLocaleString(\"de-DE\", {timeZone: \"Europe/Berlin\"});\r\n    //       })\r\n    //       .catch(err => {\r\n    //         console.log(err);\r\n    //         this.refreshLoading = false;\r\n    //         this.snackbar = true;\r\n    //       });\r\n    // }\r\n  }\r\n}\r\n</script>"]}]}